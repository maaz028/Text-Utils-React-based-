{"version":3,"sources":["components/Navbar.js","components/Textarea.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","title","type","id","onClick","enableMode","style","Style","htmlFor","modeText","Textarea","useState","text","setText","required","value","onChange","event","target","textanalyzed","toUpperCase","showAlert","toLowerCase","length","new_text","match","join","i","charAt","split","Alerts","alert","xmlns","display","fill","viewBox","d","role","width","height","xlinkHref","msg","App","setMode","setModeText","setAlert","color","setStyle","setTimeout","fontFamily","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e8f2005.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styling/Style.css'\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" >{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                           \r\n                        </ul>\r\n                        <form className=\"d-flex\">\r\n                            <div className=\"form-check form-switch\">\r\n                                <input onClick={props.enableMode} className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                                <label style={props.Style} className=\"form-check-label mx-2\" htmlFor=\"flexSwitchCheckDefault\">{props.modeText}</label>\r\n                            </div>\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\n\r\n\r\nexport default function Textarea(props) {\r\n\r\n    const [text,setText] = useState('')\r\n\r\nconst handleOnChange = (event)=>{\r\n    setText(event.target.value)\r\n}\r\nconst convertUppercase =()=>\r\n{\r\n    let textanalyzed = text.toUpperCase()\r\n    setText(textanalyzed)\r\n    props.showAlert('Text changed!',' text converted to upper Case')\r\n}\r\nconst convertLowercase =()=>\r\n{\r\n    let textanalyzed = text.toLowerCase()\r\n    setText(textanalyzed)\r\n    props.showAlert('Text changed!',' text converted to Lower Case')\r\n}\r\nconst removePunctuation =()=>\r\n{\r\n   \r\n    if (text.length>0)\r\n    {\r\n\r\n        let new_text = text.match(/[^_\\W]+/g).join(' ')\r\n        setText(new_text)\r\n        props.showAlert('Text changed!',' punctuation removed')\r\n    }\r\n}\r\n   \r\nconst removeExtraSpace =()=>\r\n{\r\n    let new_text = '';\r\n    for(let i=0;i<text.length;i++)\r\n    {\r\n        if(i+1 < text.length){\r\n            if (text.charAt(i)===' ' && text.charAt(i+1)===' ')\r\n            {\r\n            continue;\r\n            }\r\n            else\r\n            {\r\n                new_text = new_text+ text.charAt(i)\r\n            }\r\n        }\r\n        setText(new_text)\r\n    }\r\n    props.showAlert('Text changed!',' Extra spaces removed')\r\n}\r\n\r\nconst clearText = ()=>\r\n{\r\n    setText('')\r\n}\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container my-6\">\r\n\r\n            <h1 style={props.Style} className='my-6 font h1' >Enter Your Text to be Analyzed.</h1>\r\n            <textarea required value={text} onChange={handleOnChange} type=\"password\" id=\"inputPassword5\" className=\"form-control\"></textarea>\r\n            <button onClick={convertUppercase} type=\"button\" className=\"btn btn-danger my-2 mx-2\">Convert it to UpperCase</button>\r\n            <button onClick={convertLowercase} type=\"button\" className=\"btn btn-danger my-2 mx-2\">Convert it to LowerCase</button>\r\n            <button onClick={removePunctuation} type=\"button\" className=\"btn btn-danger my-2 mx-2\">Remove Punctuation</button>\r\n            <button onClick={removeExtraSpace} type=\"button\" className=\"btn btn-danger my-2 mx-2\">Remove Extra Space</button>\r\n            <button onClick={clearText} type=\"button\" className=\"btn btn-danger my-2 mx-2\">Clear Text</button>\r\n            <p style={props.Style} className='my-3'>{text.split(' ').length} Words, {text.length} Characters</p>\r\n            <h2 className='font' style={props.Style} className='my-2 font'>Preview Text</h2>\r\n            <div className='font'  style={props.Style}><p>{text.length>0?text:\"Enter text in the Above Text box to Preview the Text\"}</p></div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function Alerts(props) {\r\n\r\n    \r\n\r\n    return (\r\n        props.alert &&    <>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" style={{display: 'none'}}>\r\n        <symbol id=\"check-circle-fill\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"/>\r\n        </symbol>\r\n        </svg>\r\n         <div className=\"alert alert-success d-flex align-items-center \" role=\"alert\">\r\n                <svg className=\"bi flex-shrink-0 me-2\" width=\"24\" height=\"24\" role=\"img\" aria-label=\"Success:\"><use xlinkHref=\"#check-circle-fill\" /></svg>\r\n                <div className='font'>\r\n                    <strong>{props.alert.type}</strong> {props.alert.msg}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Textarea from './components/Textarea';\nimport Alerts from './components/Alerts';\nimport React, { useState } from 'react'\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light')\n    const[modeText,setModeText] = useState('Enable Dark Mode')\n    const [alert, setAlert] = useState(null)\n    const [Style, setStyle] = useState({\n        color:'black'\n    })\n\n    const showAlert = (type,msg)=>\n    {\n        setAlert({\n            msg:msg,\n            type:type\n        })\n        setTimeout(()=>\n        {\n            setAlert(null);\n        },2000)\n    }\n\n    const enableMode = ()=>{\n        if (mode==='light'){\n            setMode('dark')\n            setModeText('Dark Mode Enabled')\n            setStyle({             \n                color:'white',\n                fontFamily: \"'Abel', sans-serif\"\n                \n            })\n            document.body.style.backgroundColor=\"#010131\";\n            showAlert('Theme changed!','Dark mode has been enabled')\n            \n        }\n        else{\n            setMode('light')\n            setModeText('Enable Dark Mode')\n            setStyle({\n                color:'black'\n            })\n            document.body.style.backgroundColor=\"white\";\n            showAlert('Theme changed!','Light mode has been enabled')\n        }}\n  return (\n\n  <>\n  <Navbar title='TextUtils'  Style = {Style} modeText = {modeText} enableMode = {enableMode} mode={mode}/>\n  <Alerts alert={alert} />\n  <Textarea showAlert={showAlert} Style={Style}/>\n  </>\n\n  );\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}